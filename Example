package main

import (
	"fmt"
	"os"
)

const (
	Reset         = "\033[0m"
	Red           = "\033[31m"
	Green         = "\033[32m"
	Yellow        = "\033[33m"
	Blue          = "\033[34m"
	Magenta       = "\033[35m"
	Cyan          = "\033[36m"
	Gray          = "\033[37m"
	White         = "\033[97m"
	BrightGreen   = "\033[92m"
	BrightYellow  = "\033[93m"
	BrightBlue    = "\033[94m"
	BrightMagenta = "\033[95m"
	BrightCyan    = "\033[96m"
	BrightWhite   = "\033[97m"
	BrightRed     = "\033[91m"
)

func main() {
	matrix := [][]bool{
		{false, false, false, false, false, false},
		{false, true, true, true, false, false},
		{false, true, false, false, false, false},
		{false, false, false, false, false, false},
		{false, false, true, true, false, false},
		{false, false, false, false, false, false},
	}

	printMatrix(matrix)
}
func printMatrix(matrix [][]bool) {
	for _, row := range matrix {
		for _, cell := range row {
			if cell {
				fmt.Print("× ")
			} else {
				fmt.Print("· ")
			}
		}
		fmt.Println()
	}
	fmt.Println()
}

func CheckArgs() int {
	if len(os.Args) > 1 {
		if os.Args[1] == "-h" || os.Args[1] == "--help" {
			return 1
		} else if os.Args[1] == "-v" || os.Args[1] == "--verbose" {
			return 2
		} else if os.Args[1] == "-d" || os.Args[1] == "--delay-ms=X" {
			return 3
		} else if os.Args[1] == "-f" || os.Args[1] == "--file=X" {
			return 4
		} else if os.Args[1] == "-ed" || os.Args[1] == "--edges-portal" {
			return 5
		} else if os.Args[1] == "-r" || os.Args[1] == "--random=WxH" {
			return 6
		} else if os.Args[1] == "-fs" || os.Args[1] == "--fullscreen" {
			return 7
		} else if os.Args[1] == "-fp" || os.Args[1] == "--footprints" {
			return 8
		} else if os.Args[1] == "-c" || os.Args[1] == "--colored" {
			return 9
		} else {
			return -1
		}
	}
	return 0
}

func GetInstructions(input int) {
	if input == -1 {
		fmt.Println(Red + "Error" + Reset + ": Invalid input. Please ensure the game map dimensions and flags are correctly specified.")
		os.Exit(1)
	}

	if input == 1 {
		PrintHelp()
	}
	if input == 3 {

	}

	fmt.Println("Please provide the height and width of the game map: ")
}

func PrintHelp() {

	fmt.Println("Welcome to the ", Green+"Game of Life"+Reset+"!")
	fmt.Println("This simulation models the evolution of cells on a grid. Each cell can be alive or dead, and its state changes based on its neighbors. \n")
	fmt.Println("Usage: go run main.go [options]\n")
	fmt.Println("Options:")
	fmt.Println(Blue + "  --verbose" + Reset + "      : Display detailed information about the simulation, including grid size, number of ticks, speed, and map name")
	fmt.Println(Blue + "  --delay-ms=X" + Reset + "   : Set the animation speed in milliseconds. Default is 2500 milliseconds")
	fmt.Println(Blue + "  --file=X" + Reset + "       : Load the initial grid from a specified file")
	fmt.Println(Blue + "  --edges-portal" + Reset + " : Enable portal edges where cells that exit the grid appear on the opposite side")
	fmt.Println(Blue + "  --random=WxH" + Reset + "   : Generate a random grid of the specified width (W) and height (H)")
	fmt.Println(Blue + "  --fullscreen" + Reset + "   : Adjust the grid to fit the terminal size with empty cells")
	fmt.Println(Blue + "  --footprints" + Reset + "   : Add traces of visited cells, displayed as '∘'")
	fmt.Println(Blue + "  --colored" + Reset + "      : Add color to live cells and traces if footprints are enabled")
	fmt.Println()
	os.Exit(0)
}
